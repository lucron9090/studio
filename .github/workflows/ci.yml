name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build-and-lint:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linter
      run: npm run lint
      
    - name: Build project
      run: npm run build
      env:
        # Use demo Firebase config for CI builds
        NEXT_PUBLIC_FIREBASE_API_KEY: demo-api-key
        NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: demo.firebaseapp.com
        NEXT_PUBLIC_FIREBASE_PROJECT_ID: demo-project
        NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: demo.appspot.com
        NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: 123456789
        NEXT_PUBLIC_FIREBASE_APP_ID: 1:123456789:web:abcdef
        GOOGLE_CLOUD_PROJECT: demo-project
        VERTEX_AI_LOCATION: us-central1
    
    - name: Check build output
      run: |
        if [ -d ".next" ]; then
          echo "✅ Build successful - .next directory created"
          ls -la .next
        else
          echo "❌ Build failed - .next directory not found"
          exit 1
        fi

  security-audit:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level=high
      continue-on-error: true
      
    - name: Check for high/critical vulnerabilities
      run: |
        AUDIT_RESULT=$(npm audit --json --audit-level=high)
        HIGH_VULNS=$(echo $AUDIT_RESULT | jq '.metadata.vulnerabilities.high // 0')
        CRITICAL_VULNS=$(echo $AUDIT_RESULT | jq '.metadata.vulnerabilities.critical // 0')
        
        echo "High vulnerabilities: $HIGH_VULNS"
        echo "Critical vulnerabilities: $CRITICAL_VULNS"
        
        if [ "$CRITICAL_VULNS" -gt 0 ]; then
          echo "❌ Critical vulnerabilities found!"
          exit 1
        fi
        
        if [ "$HIGH_VULNS" -gt 0 ]; then
          echo "⚠️ High vulnerabilities found - review recommended"
        fi
      continue-on-error: true
